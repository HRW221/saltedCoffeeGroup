# Generated by Django 4.2.11 on 2024-03-11 17:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Userprofile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('score', models.IntegerField(default=0)),
                ('bonus_score', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_profiles', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_profiles', related_query_name='user_profile', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('card_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=50)),
                ('description', models.TextField(default='')),
                ('plant_photo', models.ImageField(default='images/plant_default.jpg', upload_to='static/images')),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('leaderboard_id', models.AutoField(primary_key=True, serialize=False)),
                ('leaderboard_name', models.CharField(default='', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Pack',
            fields=[
                ('pack_id', models.AutoField(primary_key=True, serialize=False)),
                ('pack_name', models.CharField(default='', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('rarity_id', models.AutoField(primary_key=True, serialize=False)),
                ('rarity_desc', models.CharField(max_length=10)),
                ('rarity_points', models.IntegerField()),
                ('rarity_colour', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='UsersCard',
            fields=[
                ('users_cards_id', models.AutoField(primary_key=True, serialize=False)),
                ('card_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainability.card')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlantOfTheDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainability.card')),
            ],
        ),
        migrations.CreateModel(
            name='LeaderboardMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leaderboard_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainability.leaderboard')),
                ('member_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='card',
            name='pack_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainability.pack'),
        ),
        migrations.AddField(
            model_name='card',
            name='rarity_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sustainability.rarity'),
        ),
    ]
